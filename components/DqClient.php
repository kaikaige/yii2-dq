<?php

namespace kaikaige\dq\components;

use yii\base\Component;
use yii\db\Exception;
use yii\httpclient\Client;
use yii\httpclient\Response;

class DqClient extends Component
{
    /**
     * @var string dq连接地址
     */
    public $addr;

    /**
     * @var Client
     */
    public $httpClient;

    public function init()
    {
        if (!$this->addr) {
            throw new \Exception("property addr 不能为空");
        }
        $this->httpClient = new Client(['baseUrl' => $this->addr]);
        parent::init(); // TODO: Change the autogenerated stub
    }

    public function topicList()
    {
        return $this->httpClient->get('topics')->send();
    }

    /**
     * @param $data
     * @date 2021/2/24 4:53 下午
     * @author gaokai
     * @return Response
     * @modified_date 2021/2/24 4:53 下午
     * @modified_user gaokai
     */
    public function topicCreate($data)
    {
        return $this->httpClient
            ->post('topic')
            ->setData($data)
            ->send();
    }

    /**
     * @param $topicName
     * @date 2021/2/24 4:52 下午
     * @author gaokai
     * @return \yii\httpclient\Response
     * @modified_date 2021/2/24 4:52 下午
     * @modified_user gaokai
     * @throws \yii\httpclient\Exception
     */
    public function topicView($topicName)
    {
        return $this->httpClient
            ->get('topic/' . $topicName)
            ->send();
    }

    public function topicUpdate($data)
    {
        return $this->topicCreate($data);
    }

    public function topicDelete($topicName)
    {
        return $this->httpClient
            ->delete('/topic/' . $topicName)
            ->send()
            ->getData();
    }

    /**
     * @des push job
     * @param $topic
     * @param $body
     * @date 2021/2/24 6:43 下午
     * @author gaokai
     * @return Response
     * @modified_date 2021/2/24 6:43 下午
     * @modified_user gaokai
     */
    public function jobPush($topic, $body)
    {
        return $this->httpClient
            ->post('job')
            ->setData(['topic'=>$topic, 'body'=>$body])
            ->send();
    }

    public function jobPop($topic, $handler)
    {
        while (true) {
            /**
             * @var $res Response
             */
            $res = $this->httpClient
                ->get('job')
                ->setData(['topic' => $topic])
                ->send();
            switch ($res->statusCode) {
                case 404:
                    echo $res->getContent()."\n";
                    sleep(1);
                    break;
                case 400:
                    echo $res->getContent()."\n";
                    break;
                case 200:
                    call_user_func($handler, $res);
                    break;
            }
        }
    }

    public function jobFinish($topic, $jobId)
    {
        return $this->httpClient
            ->delete('job?'.http_build_query(['topic'=>$topic, 'job_id'=>$jobId]))
            ->send();
    }
}


